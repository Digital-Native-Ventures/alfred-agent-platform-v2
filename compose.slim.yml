name: alfred-agent-platform-v2
services:
  agent-atlas:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/atlas-worker
      dockerfile: Dockerfile
    container_name: agent-atlas
    depends_on:
      agent-rag:
        condition: service_started
        required: true
      model-router:
        condition: service_started
        required: true
      pubsub-emulator:
        condition: service_started
        required: true
      redis:
        condition: service_started
        required: true
    environment:
      ALFRED_DATABASE_URL: postgresql://postgres:postgres@db-postgres:5432/postgres
      ALFRED_GOOGLE_APPLICATION_CREDENTIALS: /tmp/empty-credentials.json
      ALFRED_MODEL_ROUTER_URL: http://model-router:8080
      ALFRED_OPENAI_API_KEY: sk-mock-key-for-development-only
      ALFRED_PROJECT_ID: alfred-agent-platform
      ALFRED_PUBSUB_EMULATOR_HOST: pubsub-emulator:8085
      ALFRED_RAG_API_KEY: atlas-key
      ALFRED_RAG_URL: http://agent-rag:8501
      ALFRED_SUPABASE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
      ALFRED_SUPABASE_URL: http://db-api:3000
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/empty-credentials.json
      GOOGLE_CLOUD_PROJECT: alfred-agent-platform
      OPENAI_API_KEY: sk-mock-key-for-development-only
      PUBSUB_EMULATOR_HOST: pubsub-emulator:8085
      PUBSUB_PROJECT_ID: alfred-agent-platform
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8000/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 1m0s
    image: atlas-worker:latest
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: agent-atlas
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8000
        published: "8000"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9095"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/config/credentials/empty-credentials.json
        target: /tmp/empty-credentials.json
        bind:
          create_host_path: true
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/libs
        target: /app/libs
        bind:
          create_host_path: true
  agent-core:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/alfred-core
      dockerfile: Dockerfile
    container_name: agent-core
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
      model-router:
        condition: service_healthy
        required: true
      pubsub-emulator:
        condition: service_started
        required: true
      redis:
        condition: service_started
        required: true
    environment:
      ALFRED_DATABASE_URL: postgresql://postgres:postgres@db-postgres:5432/postgres
      ALFRED_DEBUG: "true"
      ALFRED_ENABLE_SLACK: "true"
      ALFRED_ENVIRONMENT: development
      ALFRED_MODE: default
      ALFRED_MODEL_ROUTER_URL: http://model-router:8080
      ALFRED_OPENAI_API_KEY: sk-mock-key-for-development-only
      ALFRED_PROJECT_ID: alfred-agent-platform
      ALFRED_PUBSUB_EMULATOR_HOST: pubsub-emulator:8085
      ALFRED_REDIS_URL: redis://redis:6379
      ALFRED_SLACK_BOT_TOKEN: placeholder-token
      ALFRED_SLACK_SIGNING_SECRET: placeholder-secret
    healthcheck:
      test:
        - CMD
        - curl
        - -fsSL
        - http://localhost:8011/health
      timeout: 5s
      interval: 30s
      retries: 3
    image: ghcr.io/locotoki/agent-core:v0.9.6
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: agent-core
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8011
        published: "8011"
        protocol: tcp
    pull_policy: always
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/libs
        target: /app/libs
        bind:
          create_host_path: true
  agent-rag:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/rag-service
      dockerfile: Dockerfile
    container_name: agent-rag
    depends_on:
      model-router:
        condition: service_started
        required: true
      redis:
        condition: service_started
        required: true
      vector-db:
        condition: service_started
        required: true
    environment:
      ALFRED_API_KEYS: atlas:atlas-key,alfred:alfred-key,financial:financial-key,legal:legal-key,social:social-key
      ALFRED_AUTH_ENABLED: "true"
      ALFRED_DEFAULT_COLLECTION: general-knowledge
      ALFRED_ENABLE_COLLECTIONS: "true"
      ALFRED_LOG_AGENT_ACCESS: "true"
      ALFRED_LOG_LEVEL: INFO
      ALFRED_MODEL_ROUTER_URL: http://model-router:8080
      ALFRED_QDRANT_HOST: vector-db
      ALFRED_QDRANT_URL: http://vector-db:6333
      ALFRED_RATE_LIMIT_REQUESTS: "100"
      ALFRED_RATE_LIMIT_WINDOW_SECONDS: "60"
      ALFRED_REDIS_URL: redis://redis:6379/0
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8501/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 1m0s
    image: atlas-rag-gateway:latest
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: agent-rag
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8501
        published: "8501"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9099"
        protocol: tcp
    restart: unless-stopped
  agent-social:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/agents/social_intel
      dockerfile: Dockerfile
    container_name: agent-social
    depends_on:
      agent-rag:
        condition: service_started
        required: true
      db-postgres:
        condition: service_healthy
        required: true
      model-router:
        condition: service_started
        required: true
      pubsub-emulator:
        condition: service_started
        required: true
      redis:
        condition: service_started
        required: true
    environment:
      ALFRED_DATABASE_URL: postgresql://postgres:postgres@db-postgres:5432/postgres
      ALFRED_DEBUG: "true"
      ALFRED_ENVIRONMENT: development
      ALFRED_MODEL_ROUTER_URL: http://model-router:8080
      ALFRED_OPENAI_API_KEY: sk-mock-key-for-development-only
      ALFRED_PROJECT_ID: alfred-agent-platform
      ALFRED_PUBSUB_EMULATOR_HOST: pubsub-emulator:8085
      ALFRED_RAG_API_KEY: social-key
      ALFRED_RAG_COLLECTION: social-knowledge
      ALFRED_RAG_URL: http://agent-rag:8501
      ALFRED_REDIS_URL: redis://redis:6379
      ALFRED_SUPABASE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
      ALFRED_SUPABASE_URL: http://db-api:3000
      ALFRED_YOUTUBE_API_KEY: youtube-mock-key-for-development-only
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:9000/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: alfred-agent-platform-v2-social-intel:latest
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: agent-social
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9000
        published: "9000"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9093"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/libs
        target: /app/libs
        bind:
          create_host_path: true
  crm-sync:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/crm-sync
      dockerfile: Dockerfile
    container_name: crm-sync
    depends_on:
      hubspot-mock:
        condition: service_started
        required: true
    environment:
      HUBSPOT_URL: http://hubspot-mock:8000
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8000/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: ghcr.io/locotoki/crm-sync:latest
    labels:
      com.docker.compose.project: alfred
      com.docker.compose.service: crm-sync
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8000
        published: "8096"
        protocol: tcp
    restart: unless-stopped
  db-admin:
    container_name: db-admin
    depends_on:
      db-api:
        condition: service_started
        required: true
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      DEFAULT_ORGANIZATION_NAME: Alfred Organization
      DEFAULT_PROJECT_NAME: Alfred Project
      POSTGRES_PASSWORD: ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz
      STUDIO_PG_META_URL: http://postgres-meta:8080
      SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImV4cCI6MTc0OTUzNjEzMH0.zcPCLGlqF3YHBP-gTlXOQ2zjV-h3VmxbThiYEg2I5io
      SUPABASE_PUBLIC_URL: http://supabase-rest:3000
      SUPABASE_SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
      SUPABASE_URL: http://supabase-kong:8000
    image: supabase/studio:20240326-5e5586d
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.service: db-admin
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 3000
        published: "3001"
        protocol: tcp
    restart: unless-stopped
  db-admin-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: db-admin-metrics
    depends_on:
      db-admin:
        condition: service_started
        required: true
    environment:
      CHECK_TYPE: http
      HEALTH_PATH: /health
      PORT: "9091"
      SERVICE_NAME: db-admin
      SERVICE_URL: http://db-admin:3000
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9091/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: db-metrics:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-admin-metrics
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9091
        published: "9122"
        protocol: tcp
    restart: unless-stopped
  db-api:
    container_name: db-api
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      DATABASE_URL: postgresql://postgres:ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz@db-postgres:5432/alfred
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_URI: postgres://postgres:ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz@db-postgres:5432/postgres
      PGRST_JWT_SECRET: fe917d099eaa563a8c730182ad01b1cd748e9907d7779cca2d00f7e4550b9a2d
    image: postgrest/postgrest:v11.2.0
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.service: db-api
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 3000
        published: "3000"
        protocol: tcp
    restart: unless-stopped
  db-api-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: db-api-metrics
    depends_on:
      db-api:
        condition: service_started
        required: true
    environment:
      CHECK_TYPE: http
      HEALTH_PATH: /
      PORT: "9091"
      SERVICE_NAME: db-api
      SERVICE_URL: http://db-api:3000
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9091/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: db-metrics:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-api-metrics
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9091
        published: "9121"
        protocol: tcp
    restart: unless-stopped
  db-auth:
    container_name: db-auth
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
      mail-server:
        condition: service_started
        required: true
    environment:
      API_EXTERNAL_URL: http://localhost:8000
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: "9999"
      GOTRUE_DB_DATABASE_URL: postgres://postgres:ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz@db-postgres:5432/postgres?search_path=auth
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: "3600"
      GOTRUE_JWT_SECRET: fe917d099eaa563a8c730182ad01b1cd748e9907d7779cca2d00f7e4550b9a2d
      GOTRUE_MAILER_AUTOCONFIRM: "false"
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_SMTP_ADMIN_EMAIL: admin@example.com
      GOTRUE_SMTP_HOST: mail-server
      GOTRUE_SMTP_PASS: ""
      GOTRUE_SMTP_PORT: "1025"
      GOTRUE_SMTP_SENDER_NAME: Alfred Auth
      GOTRUE_SMTP_USER: ""
      GOTRUE_URI_ALLOW_LIST: http://localhost:3000/auth/callback
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9999/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: supabase/gotrue:v2.132.3
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.service: db-auth
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    platform: linux/amd64
    ports:
      - mode: ingress
        target: 9999
        published: "9999"
        protocol: tcp
    restart: unless-stopped
  db-auth-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: db-auth-metrics
    depends_on:
      db-auth:
        condition: service_started
        required: true
    environment:
      CHECK_TYPE: http
      HEALTH_PATH: /health
      PORT: "9091"
      SERVICE_NAME: db-auth
      SERVICE_URL: http://db-auth:9999
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9091/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: db-metrics:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-auth-metrics
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9091
        published: "9120"
        protocol: tcp
    restart: unless-stopped
  db-exporter:
    depends_on:
      db-postgres:
        condition: service_started
        required: true
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:postgres@db-postgres:5432/postgres?sslmode=disable
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-exporter
    networks:
      alfred-network: null
    restart: unless-stopped
  db-postgres:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/bootstrap
      dockerfile: Dockerfile.postgres-hardened
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - FOWNER
      - DAC_OVERRIDE
    cap_drop:
      - ALL
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_connections=200
      - -c
      - listen_addresses=*
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - log_statement=ddl
      - -c
      - log_connections=on
      - -c
      - log_disconnections=on
      - -c
      - password_encryption=scram-sha-256
    container_name: db-postgres
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "2147483648"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
      POSTGRES_PASSWORD: ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz
      POSTGRES_USER: postgres
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -U
        - postgres
      timeout: 5s
      interval: 10s
      retries: 5
    image: postgres:15-alpine
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.security: hardened
      com.docker.compose.service: db-postgres
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 5432
        published: "5432"
        protocol: tcp
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - type: volume
        source: db-postgres-data
        target: /var/lib/postgresql/data
        volume: {}
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/migrations/supabase
        target: /docker-entrypoint-initdb.d
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/bootstrap
        target: /bootstrap
        read_only: true
        bind:
          create_host_path: true
  db-realtime:
    container_name: db-realtime
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      DB_HOST: db-postgres
      DB_NAME: postgres
      DB_PASSWORD: ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz
      DB_PORT: "5432"
      DB_SSL: "false"
      DB_USER: postgres
      ERL_AFLAGS: -proto_dist inet_tcp
      FLY_ALLOC_ID: local
      FLY_APP_NAME: realtime
      JWT_SECRET: fe917d099eaa563a8c730182ad01b1cd748e9907d7779cca2d00f7e4550b9a2d
      PORT: "4000"
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: "100"
      RLIMIT_NOFILE: "100000"
      SECRET_KEY_BASE: 2a889e9d516d08490c603f4ec73c58c0b1d4d9cc8c6be2b3c7639d2c780bb4d0
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
    healthcheck:
      test:
        - CMD-SHELL
        - nc -z localhost 4000 || exit 1
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: supabase/realtime:v2.27.5
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.service: db-realtime
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 4000
        published: "4000"
        protocol: tcp
    restart: unless-stopped
  db-realtime-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: db-realtime-metrics
    depends_on:
      db-realtime:
        condition: service_started
        required: true
    environment:
      CHECK_TYPE: tcp
      PORT: "9091"
      SERVICE_NAME: db-realtime
      SERVICE_URL: db-realtime:4000
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9091/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: db-metrics:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-realtime-metrics
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9091
        published: "9123"
        protocol: tcp
    restart: unless-stopped
  db-storage:
    container_name: db-storage
    depends_on:
      db-api:
        condition: service_started
        required: true
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImV4cCI6MTc0OTUzNjEzMH0.zcPCLGlqF3YHBP-gTlXOQ2zjV-h3VmxbThiYEg2I5io
      DATABASE_URL: postgresql://postgres:postgres@db-postgres:5432/postgres
      ENABLE_IMAGE_TRANSFORMATION: "true"
      FILE_SIZE_LIMIT: "52428800"
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      GLOBAL_S3_BUCKET: supabase-storage
      JWT_SECRET: jwt-secret-for-development-only
      PGRST_JWT_SECRET: jwt-secret-for-development-only
      PGRST_URL: http://db-api:3000
      REGION: local
      SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
      SKIP_MIGRATIONS: "true"
      STORAGE_BACKEND: file
      TENANT_ID: stub
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://127.0.0.1:5001/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 30s
    image: postgres:15.5-alpine
    labels:
      com.docker.compose.group: database
      com.docker.compose.project: alfred
      com.docker.compose.service: db-storage
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 5000
        published: "5000"
        protocol: tcp
      - mode: ingress
        target: 5001
        published: "5001"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: db-storage-data
        target: /var/lib/storage
        volume: {}
  db-storage-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: db-storage-metrics
    depends_on:
      db-api:
        condition: service_started
        required: true
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      CHECK_TYPE: http
      HEALTH_PATH: /health
      PORT: "9091"
      SERVICE_NAME: db-storage
      SERVICE_URL: http://db-storage:5001
    healthcheck:
      test:
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - http://localhost:9091/healthz
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: db-metrics:latest
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: db-storage-metrics
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9091
        published: "9124"
        protocol: tcp
    restart: unless-stopped
  hubspot-mock:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/hubspot-mock
      dockerfile: Dockerfile
    container_name: hubspot-mock
    environment:
      PORT: "8000"
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8000/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: ghcr.io/locotoki/hubspot-mock:latest
    labels:
      com.docker.compose.project: alfred
      com.docker.compose.service: hubspot-mock
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8000
        published: "8088"
        protocol: tcp
    restart: unless-stopped
  llm-service:
    command:
      - serve
    container_name: llm-service
    environment:
      OPENAI_API_KEY: ""
    healthcheck:
      test:
        - CMD-SHELL
        - ollama list || exit 1
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 2m0s
    image: ollama/ollama:latest
    labels:
      com.docker.compose.group: llm
      com.docker.compose.project: alfred
      com.docker.compose.service: llm-service
      prometheus.metrics.port: "9091"
    mem_limit: "1073741824"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 11434
        published: "11434"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: llm-service-data
        target: /root/.ollama
        volume: {}
  mail-server:
    container_name: mail-server
    healthcheck:
      test:
        - CMD
        - wget
        - --spider
        - -q
        - http://localhost:8025/
      timeout: 3s
      interval: 15s
      retries: 5
    image: mailhog/mailhog:v1.0.1
    labels:
      com.docker.compose.group: mail
      com.docker.compose.project: alfred
      com.docker.compose.service: mail-server
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 1025
        published: "1025"
        protocol: tcp
      - mode: ingress
        target: 8025
        published: "8025"
        protocol: tcp
    restart: unless-stopped
  model-registry:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/model-registry
      dockerfile: Dockerfile
    container_name: model-registry
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
      llm-service:
        condition: service_started
        required: true
    environment:
      ANTHROPIC_API_KEY: ""
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db-postgres:5432/postgres
      DEBUG: "true"
      OLLAMA_URL: http://llm-service:11434
      OPENAI_API_KEY: sk-mock-key-for-development-only
      PORT: "8080"
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://model-registry:8080/health
      timeout: 5s
      interval: 10s
      retries: 3
      start_period: 20s
    image: model-registry:latest
    labels:
      com.docker.compose.group: llm
      com.docker.compose.project: alfred
      com.docker.compose.service: model-registry
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8080
        published: "8079"
        protocol: tcp
    restart: unless-stopped
  model-router:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/model/router
      dockerfile: Dockerfile
    container_name: model-router
    depends_on:
      llm-service:
        condition: service_healthy
        required: true
      model-registry:
        condition: service_started
        required: true
    environment:
      DEBUG: "true"
      LLM_HOST: http://llm-service:11434
      MODEL_REGISTRY_URL: http://model-registry:8079
      PORT: "8080"
    healthcheck:
      test:
        - CMD
        - curl
        - -fsSL
        - http://model-router:8080/health
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 20s
    image: model-router:latest
    labels:
      com.docker.compose.group: llm
      com.docker.compose.project: alfred
      com.docker.compose.service: model-router
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8080
        published: "8080"
        protocol: tcp
    restart: unless-stopped
  monitoring-dashboard:
    container_name: monitoring-dashboard
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    healthcheck:
      test:
        - CMD
        - wget
        - --spider
        - -q
        - http://localhost:3000/api/health
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 45s
    image: grafana/grafana:10.2.3
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: monitoring-dashboard
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 3000
        published: "3005"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/monitoring/grafana/dashboards
        target: /var/lib/grafana/dashboards
        bind:
          create_host_path: true
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/monitoring/grafana/provisioning
        target: /etc/grafana/provisioning
        bind:
          create_host_path: true
      - type: volume
        source: monitoring-dashboard-data
        target: /var/lib/grafana
        volume: {}
  monitoring-db:
    container_name: monitoring-db
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz@db-postgres:5432/postgres?sslmode=disable
    healthcheck:
      test:
        - CMD
        - healthcheck
        - --http
        - http://localhost:9187/metrics
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: prometheuscommunity/postgres-exporter:v0.15.0
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: monitoring-db
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9187
        published: "9187"
        protocol: tcp
    restart: unless-stopped
  monitoring-metrics:
    container_name: monitoring-metrics
    healthcheck:
      test:
        - CMD
        - wget
        - --spider
        - -q
        - http://localhost:9090/-/ready
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 45s
    image: prom/prometheus:v2.48.1
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: monitoring-metrics
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9090
        published: "9090"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/monitoring/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        bind:
          create_host_path: true
      - type: volume
        source: monitoring-metrics-data
        target: /prometheus
        volume: {}
  monitoring-node:
    container_name: monitoring-node
    healthcheck:
      test:
        - CMD
        - healthcheck
        - --http
        - http://localhost:9090/-/healthy
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: prom/node-exporter:v1.7.0
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: monitoring-node
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9100
        published: "9100"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: /
        target: /rootfs
        read_only: true
        bind:
          create_host_path: true
  monitoring-redis:
    container_name: monitoring-redis
    depends_on:
      redis:
        condition: service_started
        required: true
    environment:
      REDIS_ADDR: redis:6379
    healthcheck:
      test:
        - CMD
        - healthcheck
        - --http
        - http://localhost:9125/metrics
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: oliver006/redis_exporter:v1.55.0
    labels:
      com.docker.compose.group: monitoring
      com.docker.compose.project: alfred
      com.docker.compose.service: monitoring-redis
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9121
        published: "9125"
        protocol: tcp
    restart: unless-stopped
  pubsub-emulator:
    command:
      - gcloud
      - beta
      - emulators
      - pubsub
      - start
      - --host-port=0.0.0.0:8085
      - --project=alfred-agent-platform
    container_name: pubsub-emulator
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8085/v1/projects/alfred-agent-platform/topics
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    labels:
      com.docker.compose.group: infrastructure
      com.docker.compose.project: alfred
      com.docker.compose.service: pubsub-emulator
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8085
        published: "8085"
        protocol: tcp
    restart: unless-stopped
  pubsub-metrics:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/metrics
      dockerfile: Dockerfile
    container_name: pubsub-metrics
    depends_on:
      pubsub-emulator:
        condition: service_started
        required: true
    environment:
      PORT: "9103"
      PROJECT_ID: alfred-agent-platform
      PUBSUB_URL: http://pubsub-emulator:8085
    healthcheck:
      test:
        - CMD
        - curl
        - -fs
        - http://localhost:9103/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: pubsub-metrics:latest
    labels:
      com.docker.compose.group: infrastructure
      com.docker.compose.project: alfred
      com.docker.compose.service: pubsub-metrics
      prometheus.metrics.port: "9103"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9103
        published: "9103"
        protocol: tcp
    restart: unless-stopped
  rag-gateway:
    healthcheck:
      test:
        - CMD-SHELL
        - nc -z localhost 8000
      timeout: 3s
      interval: 15s
      retries: 5
    image: localhost/alfred-platform/rag-gateway:latest
    networks:
      default: null
  redis:
    command:
      - redis-server
      - --requirepass
      - UVjYfC/2V7qjMXC/WeOGWg==
    container_name: redis
    environment:
      REDIS_PASSWORD: UVjYfC/2V7qjMXC/WeOGWg==
    healthcheck:
      test:
        - CMD
        - redis-cli
        - -a
        - UVjYfC/2V7qjMXC/WeOGWg==
        - ping
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 45s
    image: redis:7-alpine
    labels:
      com.docker.compose.group: infrastructure
      com.docker.compose.project: alfred
      com.docker.compose.service: redis
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: redis-data
        target: /data
        volume: {}
  redis-exporter:
    command:
      - --redis.addr=redis://:UVjYfC/2V7qjMXC/WeOGWg==@redis:6379
      - --web.listen-address=:9121
    container_name: redis-exporter
    depends_on:
      redis:
        condition: service_healthy
        required: true
    environment:
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: UVjYfC/2V7qjMXC/WeOGWg==
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - wget -qO- http://localhost:9121/metrics | grep -q '^redis_up 1'
      timeout: 5s
      interval: 30s
      retries: 3
      start_period: 30s
    image: oliver006/redis_exporter:v1.62.0-alpine
    labels:
      com.docker.compose.group: infrastructure
      com.docker.compose.project: alfred
      com.docker.compose.service: redis-exporter
      prometheus.metrics.port: "9121"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 9121
        published: "9101"
        protocol: tcp
    restart: unless-stopped
  slack-bot:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/slack-bot
      dockerfile: Dockerfile
    container_name: slack-bot
    depends_on:
      redis:
        condition: service_healthy
        required: true
    environment:
      REDIS_URL: redis://:UVjYfC/2V7qjMXC/WeOGWg==@redis:6379
      SLACK_APP_TOKEN: ${SLACK_APP_TOKEN}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
    healthcheck:
      test:
        - CMD-SHELL
        - curl -fs http://localhost:8000/health || exit 1
      timeout: 3s
      interval: 15s
      retries: 5
    image: ghcr.io/digital-native-ventures/slack-bot:edge
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: slack-bot
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8000
        published: "3011"
        protocol: tcp
    restart: unless-stopped
  telegram-adapter:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/adapters/telegram
      dockerfile: Dockerfile
    container_name: telegram-adapter
    depends_on:
      redis:
        condition: service_healthy
        required: true
    environment:
      ALFRED_CORE_URL: http://agent-core:8011
      ALFRED_ENVIRONMENT: development
      ALFRED_LOG_LEVEL: INFO
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus
      TELEGRAM_BOT_TOKEN: ""
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8080/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: localhost/alfred-platform/telegram-adapter:latest
    labels:
      com.docker.compose.group: agents
      com.docker.compose.project: alfred
      com.docker.compose.service: telegram-adapter
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8080
        published: "3002"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9129"
        protocol: tcp
    restart: unless-stopped
  ui-admin:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/services/mission-control-simplified
      dockerfile: Dockerfile
    container_name: ui-admin
    depends_on:
      agent-core:
        condition: service_started
        required: true
      agent-social:
        condition: service_started
        required: true
    environment:
      ALFRED_API_URL: http://agent-core:8011
      ALFRED_RAG_URL: http://agent-rag:8501
      NEXT_PUBLIC_SOCIAL_INTEL_URL: http://agent-social:9000
      NODE_ENV: production
      PORT: "3007"
    healthcheck:
      test:
        - CMD
        - healthcheck
        - --http
        - http://localhost:3007/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    image: mission-control-simplified:latest
    labels:
      com.docker.compose.group: ui
      com.docker.compose.project: alfred
      com.docker.compose.service: ui-admin
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 3007
        published: "3007"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9126"
        protocol: tcp
    restart: unless-stopped
  ui-chat:
    build:
      context: /Users/locotoki/projects/alfred-agent-platform-v2/alfred/ui
      dockerfile: Dockerfile
    container_name: ui-chat
    depends_on:
      agent-core:
        condition: service_started
        required: true
      model-router:
        condition: service_started
        required: true
    environment:
      ALFRED_API_URL: http://agent-core:8011
      ALFRED_MODEL_ROUTER_URL: http://model-router:8080
      ENABLE_DIRECT_INFERENCE: "true"
    healthcheck:
      test:
        - CMD
        - healthcheck
        - --http
        - http://localhost:8501/health
      timeout: 20s
      interval: 30s
      retries: 5
      start_period: 45s
    labels:
      com.docker.compose.group: ui
      com.docker.compose.project: alfred
      com.docker.compose.service: ui-chat
      prometheus.metrics.port: "9091"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 8501
        published: "8502"
        protocol: tcp
      - mode: ingress
        target: 9091
        published: "9098"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /Users/locotoki/projects/alfred-agent-platform-v2/services/streamlit-chat
        target: /app
        bind:
          create_host_path: true
    working_dir: /app
  vector-db:
    container_name: vector-db
    depends_on:
      db-postgres:
        condition: service_healthy
        required: true
    environment:
      POSTGRES_PASSWORD: ukqZ7aW4J/9MZ5nFslU2CFhOemJFhSiz
      QDRANT__STORAGE__ROOT_PATH: /qdrant/storage
    image: qdrant/qdrant:v1.7.4
    labels:
      com.docker.compose.group: infrastructure
      com.docker.compose.project: alfred
      com.docker.compose.service: vector-db
      prometheus.metrics.port: "6333"
    networks:
      alfred-network: null
    ports:
      - mode: ingress
        target: 6333
        published: "6333"
        protocol: tcp
      - mode: ingress
        target: 6334
        published: "6334"
        protocol: tcp
      - mode: ingress
        target: 6333
        published: "9102"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: volume
        source: vector-db-data
        target: /qdrant/storage
        volume: {}
networks:
  alfred-network:
    name: alfred-agent-platform-v2_alfred-network
  default:
    name: alfred-agent-platform-v2_default
volumes:
  db-postgres-data:
    name: alfred-db-postgres-data
  db-storage-data:
    name: alfred-db-storage-data
  llm-service-data:
    name: alfred-llm-service-data
  monitoring-dashboard-data:
    name: alfred-monitoring-dashboard-data
  monitoring-metrics-data:
    name: alfred-monitoring-metrics-data
  redis-data:
    name: alfred-redis-data
  vector-db-data:
    name: alfred-vector-db-data
x-agent-service-labels:
  com.docker.compose.group: agents
  com.docker.compose.project: alfred
x-common-labels:
  com.docker.compose.project: alfred
x-database-service-labels:
  com.docker.compose.group: database
  com.docker.compose.project: alfred
x-health-check-settings:
  interval: 30s
  retries: 5
  start_period: 45s
  timeout: 20s
x-infra-service-labels:
  com.docker.compose.group: infrastructure
  com.docker.compose.project: alfred
x-llm-service-labels:
  com.docker.compose.group: llm
  com.docker.compose.project: alfred
x-mail-service-labels:
  com.docker.compose.group: mail
  com.docker.compose.project: alfred
x-monitoring-service-labels:
  com.docker.compose.group: monitoring
  com.docker.compose.project: alfred
x-ui-service-labels:
  com.docker.compose.group: ui
  com.docker.compose.project: alfred
