# Docker Compose Structure

This document outlines the simplified Docker Compose structure we've implemented for the Alfred Agent Platform v2.

## Core Principles

1. **Single Source of Truth**: One canonical file defines all services
2. **Clear Overrides**: Only one layer of overrides for each purpose
3. **Profiles for Optionality**: Service groups enabled via profiles
4. **Local Customization**: Template for personal development needs

## File Structure

### 1. `docker-compose.yml`

- **Purpose**: Main configuration file, defines all services
- **Role**: Source of truth for production deployments
- **Content**: Complete service definitions, networks, volumes, ports

### 2. `docker-compose.dev.yml`

- **Purpose**: Development-specific overrides
- **Role**: Customizes services for local development
- **Content**:
  - Hot-reloading via volume mounts
  - Debug-level logging
  - Development-specific service configuration
  - Services marked with `profiles: ["dev"]`
  - Mock service definitions with `profiles: ["mocks"]`

### 3. `docker-compose.local.yml` (gitignored)

- **Purpose**: Developer-specific personal overrides
- **Role**: Allows individual customization
- **Content**: Machine-specific settings (ports, paths, etc.)
- **Note**: Template provided as `docker-compose.local.yml.template`

## Usage Patterns

### Basic Production-like Setup

```bash
# Start all services with production settings
docker compose up -d
```

### Development Environment

```bash
# Start with development overrides
docker compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev up -d

# Include mock services
docker compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev --profile mocks up -d
```

### Personal Development Setup

```bash
# Include all overrides and profiles
docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.local.yml --profile dev up -d
```

## Profile Usage

Profiles allow selective enabling of service groups:

- **dev**: Development overrides (hot-reloading, logging)
- **mocks**: Mock services (simplified implementations)

Example in docker-compose.dev.yml:
```yaml
services:
  redis:
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1"]
    profiles: ["dev"]

  mock-storage:
    image: mock-storage-api:latest
    profiles: ["mocks"]
```

## Benefits of This Approach

1. **Simplicity**: Clear, predictable structure
2. **Consistency**: One way to define each service type
3. **Flexibility**: Profiles enable targeted service selection
4. **Maintainability**: Easier to understand and update
5. **Developer-friendly**: Simple local customization

## Migration Notes

Previous setup had multiple override files:
- `docker-compose.override.yml`
- `docker-compose.override.social-intel.yml`
- `docker-compose.override.ui-chat.yml`

These have been consolidated into a single `docker-compose.dev.yml` with profiles, making the structure clearer and more predictable.

The health check functionality we implemented in the db-storage service remains intact, and all service definitions maintain their original functionality while following a more standardized pattern.
