services:
  # Database Services
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: supabase-db
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-password}
      POSTGRES_DB: postgres
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token}
      JWT_EXP: 3600
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./migrations/supabase:/docker-entrypoint-initdb.d
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_connections=1000
      - -c
      - listen_addresses=*

  supabase-auth:
    image: supabase/gotrue:v2.132.3
    container_name: supabase-auth
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - "9999:9999"
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres?search_path=auth
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-false}

  supabase-rest:
    image: postgrest/postgrest:v11.2.0
    container_name: supabase-rest
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}

  supabase-studio:
    image: alpine:latest
    container_name: supabase-studio
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    ports:
      - "3001:3000"
    environment:
      STUDIO_PG_META_URL: http://postgres-meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    command: sh -c 'echo "Supabase Studio Stub Service" && tail -f /dev/null'

  supabase-realtime:
    image: alpine:latest
    container_name: supabase-realtime
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - "4000:4000"
    environment:
      PORT: 4000
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SSL: "false"
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RLIMIT_NOFILE: 100000
      FLY_APP_NAME: realtime
      FLY_ALLOC_ID: local
      ERL_AFLAGS: "-proto_dist inet_tcp"
    command: sh -c 'echo "Supabase Realtime Stub Service" && tail -f /dev/null'

  supabase-storage:
    image: alpine:latest
    container_name: supabase-storage
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    ports:
      - "5000:5000"
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      GLOBAL_S3_BUCKET: ${GLOBAL_S3_BUCKET}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      FILE_STORAGE_BACKEND_PATH: ${FILE_STORAGE_BACKEND_PATH:-/var/lib/storage}
      REGION: ${REGION}
      TENANT_ID: ${TENANT_ID}
      IS_MULTITENANT: ${IS_MULTITENANT}
    volumes:
      - supabase-storage-data:/var/lib/storage
    command: sh -c 'echo "Supabase Storage Stub Service" && tail -f /dev/null'

  # Message Queue Services
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    container_name: pubsub-emulator
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085 --project=alfred-agent-platform
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/v1/projects/alfred-agent-platform/topics"]

  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-storage:/qdrant/storage

  # LLM Services
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-models:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Observability Stack
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    ports:
      - "3005:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres?sslmode=disable
    depends_on:
      supabase-db:
        condition: service_healthy

  # Core Alfred Services
  alfred:
    build:
      context: ./services/alfred-core
      dockerfile: Dockerfile
    container_name: alfred
    depends_on:
      supabase-db:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8011:8011"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - ALFRED_MODE=${ALFRED_MODE:-default}
      - ENABLE_SLACK=${ENABLE_SLACK:-true}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./services/alfred-core:/app

  streamlit-chat:
    build:
      context: ./services/streamlit-chat
      dockerfile: Dockerfile
    container_name: streamlit-chat
    depends_on:
      alfred:
        condition: service_started
    ports:
      - "8501:8501"
    environment:
      - ALFRED_API_URL=http://alfred:8011
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./services/streamlit-chat:/app

  # Agent Services
  atlas:
    image: worker:latest
    container_name: atlas
    ports:
      - "8000:8000"
    command: python -m atlas.main
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - PUBSUB_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - REDIS_URL=redis://redis:6379
      - GOOGLE_APPLICATION_CREDENTIALS=/tmp/empty-credentials.json
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - /dev/null:/tmp/empty-credentials.json
    depends_on:
      - redis
      - pubsub-emulator
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.socket().connect(('localhost', 8000))"]
      interval: 30s
      timeout: 10s
      retries: 3

  rag-gateway:
    image: rag-gateway:latest
    container_name: rag-gateway
    ports:
      - "8505:8501"
    command: uvicorn rag_gateway.main:app --host 0.0.0.0 --port 8501
    depends_on:
      - qdrant

  social-intel:
    image: alpine:latest
    container_name: social-intel
    depends_on:
      supabase-db:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "9000:9000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    command: sh -c 'echo "Social Intelligence Stub Service" && tail -f /dev/null'

  financial-tax:
    image: alpine:latest
    container_name: financial-tax
    depends_on:
      supabase-db:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "9003:9003"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: sh -c 'echo "Financial Tax Stub Service" && tail -f /dev/null'

  legal-compliance:
    image: alpine:latest
    container_name: legal-compliance
    depends_on:
      supabase-db:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "9002:9002"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-alfred-agent-platform}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: sh -c 'echo "Legal Compliance Stub Service" && tail -f /dev/null'

  mission-control:
    image: alpine:latest
    container_name: mission-control
    ports:
      - "3007:3000"
    command: sh -c 'echo "Mission Control Stub Service" && tail -f /dev/null'

volumes:
  supabase-db-data:
  supabase-storage-data:
  qdrant-storage:
  ollama-models:
  redis-data:
  prometheus-data:
  grafana-data:
  social-intel-data:

networks:
  default:
    name: alfred-network
    driver: bridge