# Alfred Agent Platform v2 - Optimized Docker Compose Configuration
# This is the base configuration file that defines all services with standard settings
# Use with environment-specific override files:
#   - docker-compose.dev.yml - For development environments
#   - docker-compose.prod.yml - For production environments
#   - docker-compose.local.yml - For local development
#   - docker-compose.test.yml - For testing environments

# Common service label templates
x-common-labels: &common-labels
  com.docker.compose.project: "alfred"

x-infra-service-labels: &infra-service-labels
  <<: *common-labels
  com.docker.compose.group: "infrastructure"

x-database-service-labels: &database-service-labels
  <<: *common-labels
  com.docker.compose.group: "database"

x-agent-service-labels: &agent-service-labels
  <<: *common-labels
  com.docker.compose.group: "agents"

x-ui-service-labels: &ui-service-labels
  <<: *common-labels
  com.docker.compose.group: "ui"

x-llm-service-labels: &llm-service-labels
  <<: *common-labels
  com.docker.compose.group: "llm"

x-monitoring-service-labels: &monitoring-service-labels
  <<: *common-labels
  com.docker.compose.group: "monitoring"

x-mail-service-labels: &mail-service-labels
  <<: *common-labels
  com.docker.compose.group: "mail"

# Common health check settings
x-health-check-settings: &basic-health-check
  interval: 30s
  timeout: 20s
  retries: 5
  start_period: 45s

# Common resource constraints
# Resource constraints removed - they were causing validation issues
# If your Docker version supports resource constraints, you can add them back
# in a way that's compatible with your environment


services:
  #############################################################################
  # CORE INFRASTRUCTURE SERVICES
  #############################################################################

  # Redis - In-memory data store
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *basic-health-check
    restart: unless-stopped
    networks:
      - alfred-network
    deploy:
    labels:
      <<: *infra-service-labels
      com.docker.compose.service: "redis"

  # Redis Exporter - Metrics for Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter
    ports:
      - "9101:9121"  # Map container's 9121 to host's 9101
    environment:
      REDIS_ADDR: redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      <<: *basic-health-check
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *infra-service-labels
      com.docker.compose.service: "redis-exporter"
      prometheus.metrics.port: "9121"

  # Vector Database - Qdrant for embeddings
  vector-db:
    image: qdrant/qdrant:v1.7.4
    container_name: vector-db
    ports:
      - "6333:6333"
      - "6334:6334"
      - "9102:6333"  # Map metrics endpoint to host port 9102
    volumes:
      - vector-db-data:/qdrant/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      <<: *basic-health-check
      start_period: 60s
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *infra-service-labels
      com.docker.compose.service: "vector-db"
      prometheus.metrics.port: "6333"

  # PubSub Emulator - Message queue for service communication
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    container_name: pubsub-emulator
    command: ["gcloud", "beta", "emulators", "pubsub", "start", "--host-port=0.0.0.0:8085", "--project=${ALFRED_PROJECT_ID:-alfred-agent-platform}"]
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/v1/projects/alfred-agent-platform/topics"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *infra-service-labels
      com.docker.compose.service: "pubsub-emulator"

  # PubSub Metrics Exporter
  pubsub-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: pubsub-metrics:latest
    container_name: pubsub-metrics
    ports:
      - "9103:9103"
    environment:
      - PUBSUB_URL=http://pubsub-emulator:8085
      - PROJECT_ID=${ALFRED_PROJECT_ID:-alfred-agent-platform}
      - PORT=9103
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:9103/health"]
      <<: *basic-health-check
    depends_on:
      pubsub-emulator:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *infra-service-labels
      com.docker.compose.service: "pubsub-metrics"
      prometheus.metrics.port: "9103"

  # Local LLM Service - Local model inference
  llm-service:
    image: ollama/ollama:latest
    container_name: llm-service
    ports:
      - "11434:11434"
      - "9094:9091"  # Map metrics port to host
    volumes:
      - llm-service-data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      <<: *basic-health-check
      start_period: 20s
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *llm-service-labels
      com.docker.compose.service: "llm-service"
      prometheus.metrics.port: "9091"

  #############################################################################
  # LLM INFRASTRUCTURE SERVICES
  #############################################################################

  # Model Registry - Manages available LLM models
  model-registry:
    build:
      context: ./alfred/model/registry
      dockerfile: Dockerfile
    image: model-registry:latest
    container_name: model-registry
    ports:
      - "8079:8079"
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db-postgres:5432/postgres
      - OLLAMA_URL=http://llm-service:11434
      - OPENAI_API_KEY=${ALFRED_OPENAI_API_KEY:-sk-mock-key-for-development-only}
      - ANTHROPIC_API_KEY=${ALFRED_ANTHROPIC_API_KEY:-}
      - PORT=8079
    # Using COPY in Dockerfile instead of volume mount to avoid WSL mount issues
    # volumes:
    #   - ./services/model-registry/init-db.sql:/app/init-db.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8079/health"]
      <<: *basic-health-check
      start_period: 20s
    depends_on:
      db-postgres:
        condition: service_healthy
      llm-service:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *llm-service-labels
      com.docker.compose.service: "model-registry"

  # Model Router - Routes LLM requests to appropriate backend
  model-router:
    build:
      context: ./alfred/model/router
      dockerfile: Dockerfile
    image: model-router:latest
    container_name: model-router
    ports:
      - "8080:8080"
    environment:
      - DEBUG=true
      - MODEL_REGISTRY_URL=http://model-registry:8079
      - PORT=8080
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:8080/health"]
      <<: *basic-health-check
      start_period: 20s
    depends_on:
      model-registry:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *llm-service-labels
      com.docker.compose.service: "model-router"

  #############################################################################
  # DATABASE SERVICES (SUPABASE)
  #############################################################################

  # PostgreSQL Database with Storage Schema Bootstrap
  db-postgres:
    build:
      context: ./bootstrap
      dockerfile: Dockerfile.postgres-init
    image: postgres:15-alpine-storage-bootstrap
    container_name: db-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - db-postgres-data:/var/lib/postgresql/data
      - ./migrations/supabase:/docker-entrypoint-initdb.d
      - ./bootstrap:/bootstrap
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_connections=1000
      - -c
      - listen_addresses=*
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-postgres"

  # Database Auth Service
  db-auth:
    image: supabase/gotrue:v2.132.3
    container_name: db-auth
    ports:
      - "9999:9999"
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-your-super-secret-password}@db-postgres:5432/${DB_NAME:-postgres}?search_path=auth
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_SECRET: ${DB_JWT_SECRET:-your-super-secret-jwt-token}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-false}
      GOTRUE_SMTP_ADMIN_EMAIL: admin@example.com
      GOTRUE_SMTP_HOST: ${SMTP_HOST:-mail-server}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-1025}
      GOTRUE_SMTP_USER: ${SMTP_USER:-}
      GOTRUE_SMTP_PASS: ${SMTP_PASS:-}
      GOTRUE_SMTP_SENDER_NAME: Alfred Auth
    command: ["auth"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
      mail-server:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-auth"
      prometheus.metrics.port: "9091"

  # Database Auth Metrics Exporter
  db-auth-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: db-metrics:latest
    container_name: db-auth-metrics
    ports:
      - "9120:9091"  # Map container's 9091 to host's 9120
    environment:
      - SERVICE_NAME=db-auth
      - SERVICE_URL=http://db-auth:9999
      - CHECK_TYPE=http
      - HEALTH_PATH=/health
      - PORT=9091
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/healthz"]
      <<: *basic-health-check
    depends_on:
      db-auth:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "db-auth-metrics"
      prometheus.metrics.port: "9091"

  # Database REST API
  db-api:
    image: postgrest/postgrest:v11.2.0
    container_name: db-api
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-your-super-secret-password}@db-postgres:5432/${DB_NAME:-postgres}
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${DB_JWT_SECRET:-your-super-secret-jwt-token}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-api"

  # Database REST API Metrics Exporter
  db-api-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: db-metrics:latest
    container_name: db-api-metrics
    ports:
      - "9121:9091"  # Map container's 9091 to host's 9121
    environment:
      - SERVICE_NAME=db-api
      - SERVICE_URL=http://db-api:3000
      - CHECK_TYPE=http
      - HEALTH_PATH=/
      - PORT=9091
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/healthz"]
      <<: *basic-health-check
    depends_on:
      db-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "db-api-metrics"
      prometheus.metrics.port: "9091"

  # Database Admin UI
  db-admin:
    image: supabase/studio:20231123-64a766a
    container_name: db-admin
    ports:
      - "3001:3000"
    environment:
      STUDIO_PG_META_URL: http://postgres-meta:8080
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your-super-secret-password}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION:-Alfred Organization}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT:-Alfred Project}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL:-http://localhost:8000}
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImV4cCI6MTc0OTUzNjEzMH0.zcPCLGlqF3YHBP-gTlXOQ2zjV-h3VmxbThiYEg2I5io}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
      db-api:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-admin"

  # Database Admin UI Metrics Exporter
  db-admin-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: db-metrics:latest
    container_name: db-admin-metrics
    ports:
      - "9122:9091"  # Map container's 9091 to host's 9122
    environment:
      - SERVICE_NAME=db-admin
      - SERVICE_URL=http://db-admin:3000
      - CHECK_TYPE=http
      - HEALTH_PATH=/health
      - PORT=9091
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/healthz"]
      <<: *basic-health-check
    depends_on:
      db-admin:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "db-admin-metrics"
      prometheus.metrics.port: "9091"

  # Database Realtime Updates
  db-realtime:
    image: supabase/realtime:v2.25.35
    container_name: db-realtime
    ports:
      - "4000:4000"
    environment:
      PORT: 4000
      DB_HOST: db-postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-postgres}
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-your-super-secret-password}
      DB_SSL: "false"
      JWT_SECRET: ${DB_JWT_SECRET:-your-super-secret-jwt-token}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-2a889e9d516d08490c603f4ec73c58c0b1d4d9cc8c6be2b3c7639d2c780bb4d0}
      RLIMIT_NOFILE: 100000
      FLY_APP_NAME: realtime
      FLY_ALLOC_ID: local
      ERL_AFLAGS: "-proto_dist inet_tcp"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 4000 || exit 1"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-realtime"

  # Database Realtime Metrics Exporter
  db-realtime-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: db-metrics:latest
    container_name: db-realtime-metrics
    ports:
      - "9123:9091"  # Map container's 9091 to host's 9123
    environment:
      - SERVICE_NAME=db-realtime
      - SERVICE_URL=db-realtime:4000
      - CHECK_TYPE=tcp
      - PORT=9091
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/healthz"]
      <<: *basic-health-check
    depends_on:
      db-realtime:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "db-realtime-metrics"
      prometheus.metrics.port: "9091"

  # Database Storage - Using custom patched storage-api that bypasses migrations
  db-storage:
    image: alfred-custom-storage-api:v0.40.4
    container_name: db-storage
    ports:
      - "5000:5000"
      - "5001:5001"  # Health check port
    environment:
      ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImV4cCI6MTc0OTUzNjEzMH0.zcPCLGlqF3YHBP-gTlXOQ2zjV-h3VmxbThiYEg2I5io
      SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
      PGRST_URL: http://db-api:3000
      PGRST_JWT_SECRET: jwt-secret-for-development-only
      DATABASE_URL: postgresql://postgres:postgres@db-postgres:5432/postgres
      REGION: local
      GLOBAL_S3_BUCKET: supabase-storage
      FILE_SIZE_LIMIT: 52428800
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      STORAGE_BACKEND: file
      JWT_SECRET: jwt-secret-for-development-only
      ENABLE_IMAGE_TRANSFORMATION: "true"
      # Our custom image completely bypasses the migrations using NODE_OPTIONS
      # to preload a patch script that makes the migration functions no-ops
      SKIP_MIGRATIONS: "true"
    volumes:
      - db-storage-data:/var/lib/storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5001/health"]
      <<: *basic-health-check
      start_period: 30s
    depends_on:
      db-postgres:
        condition: service_healthy
      db-api:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *database-service-labels
      com.docker.compose.service: "db-storage"

  # Database Storage Metrics Exporter
  db-storage-metrics:
    build:
      context: ./alfred/metrics
      dockerfile: Dockerfile
    image: db-metrics:latest
    container_name: db-storage-metrics
    ports:
      - "9124:9091"  # Map container's 9091 to host's 9124
    environment:
      - SERVICE_NAME=db-storage
      - SERVICE_URL=http://db-storage:5001
      - CHECK_TYPE=http
      - HEALTH_PATH=/health
      - PORT=9091
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/healthz"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
      db-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "db-storage-metrics"
      prometheus.metrics.port: "9091"

  #############################################################################
  # AGENT SERVICES
  #############################################################################

  # Core Agent Service
  agent-core:
    image: ghcr.io/locotoki/agent-core:v0.9.6
    pull_policy: always
    container_name: agent-core
    ports:
      - "8011:8011"
    environment:
      - ALFRED_ENVIRONMENT=development
      - ALFRED_DEBUG=true
      - ALFRED_MODE=default
      - ALFRED_ENABLE_SLACK=true
      - ALFRED_DATABASE_URL=postgresql://postgres:postgres@db-postgres:5432/postgres
      - ALFRED_REDIS_URL=redis://redis:6379
      - ALFRED_PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - ALFRED_PROJECT_ID=alfred-agent-platform
      - ALFRED_SLACK_BOT_TOKEN=placeholder-token
      - ALFRED_SLACK_SIGNING_SECRET=placeholder-secret
      - ALFRED_OPENAI_API_KEY=sk-mock-key-for-development-only
      - ALFRED_MODEL_ROUTER_URL=http://model-router:8080
    volumes:
      - ./libs:/app/libs
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
      model-router:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "agent-core"

  # Slack MCP Gateway Service
  slack_mcp_gateway:
    build:
      context: ./services/slack_mcp_gateway
      dockerfile: Dockerfile
    image: slack-mcp-gateway:latest
    container_name: slack_mcp_gateway
    ports:
      - "3000:3000"
      - "9127:9091"  # Map metrics port to host
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      <<: *basic-health-check
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "slack-mcp-gateway"
      prometheus.metrics.port: "9091"

  # Slack Adapter Service
  slack-adapter:
    build:
      context: .
      dockerfile: ./alfred/adapters/slack/Dockerfile
    image: alfred-slack-adapter:latest
    container_name: slack-adapter
    ports:
      - "3001:8000"  # Map host port 3001 to container port 8000
      - "9128:9091"  # Metrics port
    environment:
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - ALFRED_LOG_LEVEL=${ALFRED_LOG_LEVEL:-INFO}
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      <<: *basic-health-check
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "slack-adapter"
      prometheus.metrics.port: "9091"

  # Telegram Adapter Service
  telegram-adapter:
    build:
      context: ./adapters/telegram
      dockerfile: Dockerfile
    image: ${ALFRED_REGISTRY}/alfred-platform/telegram-adapter:${ALFRED_VERSION:-latest}
    container_name: telegram-adapter
    ports:
      - "3002:8080"  # Map host port 3002 to container port 8080
      - "9129:9091"  # Metrics port
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ALFRED_ENVIRONMENT=${ALFRED_ENVIRONMENT:-development}
      - ALFRED_LOG_LEVEL=${ALFRED_LOG_LEVEL:-INFO}
      - ALFRED_CORE_URL=http://agent-core:8011
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      <<: *basic-health-check
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "telegram-adapter"
      prometheus.metrics.port: "9091"

  # RAG Service
  agent-rag:
    build:
      context: ./services/rag-service
      dockerfile: Dockerfile
    image: atlas-rag-gateway:latest
    container_name: agent-rag
    ports:
      - "8501:8501"
      - "9099:9091"  # Map metrics port to host
    environment:
      - ALFRED_QDRANT_URL=http://vector-db:6333
      - ALFRED_QDRANT_HOST=vector-db
      - ALFRED_REDIS_URL=redis://redis:6379/0
      - ALFRED_DEFAULT_COLLECTION=general-knowledge
      - ALFRED_ENABLE_COLLECTIONS=true
      - ALFRED_AUTH_ENABLED=true
      - ALFRED_API_KEYS=atlas:atlas-key,alfred:alfred-key,financial:financial-key,legal:legal-key,social:social-key
      - ALFRED_RATE_LIMIT_REQUESTS=100
      - ALFRED_RATE_LIMIT_WINDOW_SECONDS=60
      - ALFRED_LOG_LEVEL=INFO
      - ALFRED_LOG_AGENT_ACCESS=true
      - ALFRED_MODEL_ROUTER_URL=http://model-router:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      <<: *basic-health-check
      start_period: 60s
    depends_on:
      vector-db:
        condition: service_started
      redis:
        condition: service_started
      model-router:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "agent-rag"
      prometheus.metrics.port: "9091"

  # Atlas Agent
  agent-atlas:
    build:
      context: ./services/atlas-worker
      dockerfile: Dockerfile
    image: atlas-worker:latest
    container_name: agent-atlas
    ports:
      - "8000:8000"
      - "9095:9091"  # Map metrics port to host
    environment:
      - ALFRED_DATABASE_URL=${ALFRED_DATABASE_URL:-postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-your-super-secret-password}@db-postgres:5432/${DB_NAME:-postgres}}
      - ALFRED_SUPABASE_URL=http://db-api:3000
      - ALFRED_SUPABASE_KEY=${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o}
      - ALFRED_PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - ALFRED_PROJECT_ID=${ALFRED_PROJECT_ID:-alfred-agent-platform}
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - PUBSUB_PROJECT_ID=${ALFRED_PROJECT_ID:-alfred-agent-platform}
      - GOOGLE_CLOUD_PROJECT=${ALFRED_PROJECT_ID:-alfred-agent-platform}
      - GOOGLE_APPLICATION_CREDENTIALS=/tmp/empty-credentials.json
      - ALFRED_GOOGLE_APPLICATION_CREDENTIALS=/tmp/empty-credentials.json
      - ALFRED_MODEL_ROUTER_URL=http://model-router:8080
      - ALFRED_RAG_URL=http://agent-rag:8501
      - ALFRED_RAG_API_KEY=atlas-key
      - OPENAI_API_KEY=${ALFRED_OPENAI_API_KEY:-sk-mock-key-for-development-only}
      - ALFRED_OPENAI_API_KEY=${ALFRED_OPENAI_API_KEY:-sk-mock-key-for-development-only}
    volumes:
      - ./config/credentials/empty-credentials.json:/tmp/empty-credentials.json
      - ./libs:/app/libs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *basic-health-check
      start_period: 60s
    depends_on:
      agent-rag:
        condition: service_started
      redis:
        condition: service_started
      pubsub-emulator:
        condition: service_started
      model-router:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "agent-atlas"
      prometheus.metrics.port: "9091"

  # Social Intelligence Agent
  agent-social:
    build:
      context: ./agents/social_intel
      dockerfile: Dockerfile
    image: alfred-agent-platform-v2-social-intel:latest
    container_name: agent-social
    ports:
      - "9000:9000"
      - "9093:9091"  # Map metrics port to host
    environment:
      - ALFRED_ENVIRONMENT=${ALFRED_ENVIRONMENT:-development}
      - ALFRED_DEBUG=${ALFRED_DEBUG:-true}
      - ALFRED_DATABASE_URL=${ALFRED_DATABASE_URL:-postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-your-super-secret-password}@db-postgres:5432/${DB_NAME:-postgres}}
      - ALFRED_REDIS_URL=redis://redis:6379
      - ALFRED_PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - ALFRED_PROJECT_ID=${ALFRED_PROJECT_ID:-alfred-agent-platform}
      - ALFRED_OPENAI_API_KEY=${ALFRED_OPENAI_API_KEY:-sk-mock-key-for-development-only}
      - ALFRED_YOUTUBE_API_KEY=${ALFRED_YOUTUBE_API_KEY:-youtube-mock-key-for-development-only}
      - ALFRED_SUPABASE_URL=http://db-api:3000
      - ALFRED_SUPABASE_KEY=${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o}
      - ALFRED_RAG_URL=http://agent-rag:8501
      - ALFRED_RAG_API_KEY=social-key
      - ALFRED_RAG_COLLECTION=social-knowledge
      - ALFRED_MODEL_ROUTER_URL=http://model-router:8080
    volumes:
      - ./libs:/app/libs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      <<: *basic-health-check
    depends_on:
      db-postgres:
        condition: service_healthy
      pubsub-emulator:
        condition: service_started
      redis:
        condition: service_started
      agent-rag:
        condition: service_started
      model-router:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "agent-social"
      prometheus.metrics.port: "9091"

  # BizDev Agent Service
  agent-bizdev:
    image: ghcr.io/locotoki/agent-bizdev:edge
    pull_policy: always
    container_name: agent-bizdev
    ports:
      - "8012:8080"
      - "9112:9091"
    environment:
      - ALFRED_ENVIRONMENT=development
      - ALFRED_DEBUG=true
      - ALFRED_LOG_LEVEL=${ALFRED_LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:8080/health"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - alfred-network
    labels:
      <<: *agent-service-labels
      com.docker.compose.service: "agent-bizdev"
      prometheus.metrics.port: "9091"


  #############################################################################
  # UI SERVICES
  #############################################################################

  # Chat UI
  ui-chat:
    build:
      context: ./alfred/ui
      dockerfile: Dockerfile
    container_name: ui-chat
    ports:
      - "8502:8501"  # Map container's 8501 to host's 8502
      - "9098:9091"  # Map metrics port to host
    environment:
      - ALFRED_API_URL=http://agent-core:8011
      - ALFRED_MODEL_ROUTER_URL=http://model-router:8080
      - ENABLE_DIRECT_INFERENCE=true
    volumes:
      - ./services/streamlit-chat:/app
    working_dir: /app
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:8501/health"]
      <<: *basic-health-check
    depends_on:
      agent-core:
        condition: service_started
      model-router:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *ui-service-labels
      com.docker.compose.service: "ui-chat"
      prometheus.metrics.port: "9091"

  # Admin Dashboard
  ui-admin:
    build:
      context: ./services/mission-control-simplified
      dockerfile: Dockerfile
    image: mission-control-simplified:latest
    container_name: ui-admin
    ports:
      - "3007:3007"  # Map container's 3007 to host's 3007
      - "9126:9091"  # Map metrics port to host (changed from 9100 to avoid conflict)
    environment:
      - ALFRED_API_URL=http://agent-core:8011
      - ALFRED_RAG_URL=http://agent-rag:8501
      - NEXT_PUBLIC_SOCIAL_INTEL_URL=http://agent-social:9000
      - NODE_ENV=production
      - PORT=3007
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:3007/health"]
      <<: *basic-health-check
    depends_on:
      agent-core:
        condition: service_started
      agent-social:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *ui-service-labels
      com.docker.compose.service: "ui-admin"
      prometheus.metrics.port: "9091"

  # Auth UI
  auth-ui:
    build:
      context: ./services/auth-ui
      dockerfile: Dockerfile
    image: auth-ui:latest
    container_name: auth-ui
    ports:
      - "3006:80"  # Map container's 80 to host's 3006
    environment:
      - ALFRED_AUTH_URL=http://db-auth:9999
      - ALFRED_API_URL=http://db-api:3000
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:80/health"]
      <<: *basic-health-check
    depends_on:
      db-auth:
        condition: service_started
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *ui-service-labels
      com.docker.compose.service: "auth-ui"

  #############################################################################
  # MONITORING SERVICES
  #############################################################################

  # Metrics Collection
  monitoring-metrics:
    image: prom/prometheus:v2.48.1
    container_name: monitoring-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - monitoring-metrics-data:/prometheus
    healthcheck:
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "monitoring-metrics"

  # Monitoring Dashboards
  monitoring-dashboard:
    image: grafana/grafana:10.2.3
    container_name: monitoring-dashboard
    ports:
      - "3005:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - monitoring-dashboard-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${MONITORING_ADMIN_PASSWORD:-admin}
    healthcheck:
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "monitoring-dashboard"

  # Host Metrics Exporter
  monitoring-node:
    image: prom/node-exporter:v1.7.0
    container_name: monitoring-node
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:9090/-/healthy"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "monitoring-node"

  # Database Metrics Exporter
  monitoring-db:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: monitoring-db
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-your-super-secret-password}@db-postgres:5432/${DB_NAME:-postgres}?sslmode=disable"
    depends_on:
      db-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:9187/metrics"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "monitoring-db"

  # Redis Metrics Exporter
  monitoring-redis:
    image: oliver006/redis_exporter:v1.55.0
    container_name: monitoring-redis
    ports:
      - "9125:9121"  # Map container's 9121 to host's 9125 to avoid conflict
    environment:
      REDIS_ADDR: redis:6379
    depends_on:
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "healthcheck", "--http", "http://localhost:9125/metrics"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *monitoring-service-labels
      com.docker.compose.service: "monitoring-redis"

  #############################################################################
  # MAIL SERVICES
  #############################################################################

  # Mail Server for Local Development (MailHog)
  mail-server:
    image: mailhog/mailhog:latest
    container_name: mail-server
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    healthcheck:
      test: ["CMD", "healthcheck", "--tcp", "localhost:1025"]
      <<: *basic-health-check
    restart: unless-stopped
    deploy:
    networks:
      - alfred-network
    labels:
      <<: *mail-service-labels
      com.docker.compose.service: "mail-server"

  # HubSpot Mock Service - Mock HubSpot API for development
  hubspot-mock:
    build:
      context: ./services/hubspot-mock
      dockerfile: Dockerfile
    image: ghcr.io/locotoki/hubspot-mock:latest
    container_name: hubspot-mock
    ports:
      - "8095:8095"
    environment:
      - PORT=8095
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/ping"]
      <<: *basic-health-check
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *common-labels
      com.docker.compose.service: "hubspot-mock"

  # Contact Ingest Service - Lead capture and processing
  contact-ingest:
    build:
      context: ./services/contact-ingest
      dockerfile: Dockerfile
    image: ghcr.io/locotoki/contact-ingest:latest
    container_name: contact-ingest
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
      - HUBSPOT_URL=http://hubspot-mock:8095
    depends_on:
      - hubspot-mock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
      <<: *basic-health-check
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *common-labels
      com.docker.compose.service: "contact-ingest"

  # CRM Sync Service - Syncs contacts with CRM systems
  crm-sync:
    build:
      context: ./services/crm-sync
      dockerfile: Dockerfile
    image: ghcr.io/locotoki/crm-sync:latest
    container_name: crm-sync
    environment:
      - HUBSPOT_MOCK_URL=http://hubspot-mock:8095
      - CONTACT_INGEST_URL=http://contact-ingest:8080
    depends_on:
      - contact-ingest
      - hubspot-mock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
      <<: *basic-health-check
    restart: unless-stopped
    networks:
      - alfred-network
    labels:
      <<: *common-labels
      com.docker.compose.service: "crm-sync"

# Volumes
volumes:
  # Infrastructure volumes
  redis-data:
    name: alfred-redis-data
    # external: true - will create as new with consistent naming
  vector-db-data:
    name: alfred-vector-db-data
    # external: true - will create as new with consistent naming
  llm-service-data:
    name: alfred-llm-service-data
    # external: true - will create as new with consistent naming

  # Database volumes
  db-postgres-data:
    name: alfred-db-postgres-data
    # external: true - will create as new with consistent naming
  db-storage-data:
    name: alfred-db-storage-data
    # external: true - will create as new with consistent naming

  # Monitoring volumes
  monitoring-metrics-data:
    name: alfred-monitoring-metrics-data
    # external: true - will create as new with consistent naming
  monitoring-dashboard-data:
    name: alfred-monitoring-dashboard-data
    # external: true - will create as new with consistent naming

# Networks
networks:
  alfred-network:
    external: true
