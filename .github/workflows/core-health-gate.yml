name: Core Health Gate

on:
  pull_request:
    branches: [main]
  push:
    tags: ["v*"]
  workflow_dispatch:

jobs:
  core-health:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create Docker network
        run: docker network create alfred-network || true
        
      - name: Start Core Services
        env:
          POSTGRES_PASSWORD: postgres
          REDIS_PASSWORD: redis-ci-password
          TELEGRAM_BOT_TOKEN: dummy-bot-token-for-ci
          OPENAI_API_KEY: dummy-api-key-for-ci
          SLACK_BOT_TOKEN: dummy-slack-token
          SLACK_SIGNING_SECRET: dummy-slack-secret
          SLACK_APP_TOKEN: dummy-slack-app-token
          DB_JWT_SECRET: dummy-jwt-secret-for-ci
          SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiZXhwIjoxNzQ5NTM2MTMwfQ.EDf3DT0Zl6qQbrLIQLwAXRWAN5kaJ5mvlAh1jm0CY-o
        run: |
          # Start only the 9 core services (excluding agent-core due to llm-service dependency)
          docker compose up -d \
            redis redis-exporter \
            db-postgres db-api \
            telegram-adapter \
            pubsub-emulator pubsub-metrics \
            monitoring-metrics monitoring-dashboard
            
      - name: Wait for Services to Initialize
        run: |
          echo "⏳ Waiting 120 seconds for services to initialize..."
          sleep 120
          
      - name: Show Container Status
        run: docker compose ps
        
      - name: Check Core Health
        id: health_check
        run: |
          chmod +x ./scripts/check-core-health.sh
          ./scripts/check-core-health.sh || true
          
      - name: Capture Current Audit
        run: |
          chmod +x ./scripts/audit-core.sh
          POSTGRES_PASSWORD=postgres ./scripts/audit-core.sh > current-audit.txt
          cat current-audit.txt
          
      - name: Verify Baseline (Optional)
        continue-on-error: true
        run: |
          if [ -f "core-baseline/audit.hash" ]; then
            current_hash=$(sha256sum current-audit.txt | awk '{print $1}')
            baseline_hash=$(cat core-baseline/audit.hash | awk '{print $1}')
            echo "Current hash: $current_hash"
            echo "Baseline hash: $baseline_hash"
            if [ "$current_hash" != "$baseline_hash" ]; then
              echo "⚠️  Configuration drift detected!"
              echo "Run './scripts/audit-core.sh' locally to see differences"
            else
              echo "✅ Configuration matches baseline"
            fi
          else
            echo "⚠️  No baseline hash found. Skipping verification."
          fi
          
      - name: Collect Logs on Failure
        if: failure()
        run: |
          echo "=== Container Status ==="
          docker compose ps
          echo
          echo "=== Unhealthy Container Logs ==="
          for container in $(docker compose ps --format '{{.Name}}' | xargs); do
            if docker inspect $container --format '{{.State.Health.Status}}' | grep -v healthy; then
              echo "=== Logs for $container ==="
              docker compose logs $container --tail 50
            fi
          done
          
      - name: Cleanup
        if: always()
        run: |
          docker compose down --remove-orphans
          docker network rm alfred-network || true