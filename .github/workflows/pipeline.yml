name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Basic validation job
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Run linting
        run: |
          black --check .
          isort --check-only --profile black .
          mypy .
          
      - name: Run tests
        run: |
          pytest -xvs

  # Metrics validation job
  validate-metrics:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for healthcheck version
        run: |
          echo "Checking Dockerfiles for healthcheck version..."
          # Verify services use the latest healthcheck binary version
          EXPECTED_VERSION="0.4.0"
          FOUND_OLD_VERSION=false
          
          for dockerfile in $(find . -name "Dockerfile" -not -path "*/node_modules/*"); do
            if grep -q "healthcheck:" "$dockerfile"; then
              if grep -q "FROM.*healthcheck:" "$dockerfile" && ! grep -q "FROM.*healthcheck:$EXPECTED_VERSION" "$dockerfile"; then
                echo "ERROR: $dockerfile is using old healthcheck version. Expected $EXPECTED_VERSION"
                FOUND_OLD_VERSION=true
              fi
            fi
          done
          
          if [ "$FOUND_OLD_VERSION" = true ]; then
            exit 1
          fi
          
      - name: Check metrics port exposure
        run: |
          echo "Checking for metrics port exposure..."
          for dockerfile in $(find . -name "Dockerfile" -not -path "*/node_modules/*"); do
            if grep -q "healthcheck serve" "$dockerfile"; then
              if ! grep -q "EXPOSE 909[0-9]" "$dockerfile"; then
                echo "ERROR: $dockerfile is missing metrics port exposure"
                exit 1
              fi
            fi
          done
      
      - name: Check for service_health metric
        run: |
          echo "Checking for service_health metric..."
          for file in $(find . -name "*.py" -not -path "*/node_modules/*"); do
            if grep -q "/metrics" "$file"; then
              # Check if the file has a metrics endpoint but doesn't include service_health
              if ! grep -q "service_health" "$file"; then
                echo "WARNING: $file has metrics endpoint but might not include service_health metric"
              fi
            fi
          done
      
      - name: Verify metrics format
        run: |
          echo "Checking metrics format..."
          # Simple validation of metrics format
          for file in $(find . -name "*.py" -not -path "*/node_modules/*"); do
            if grep -q -E '^\s+# HELP' "$file" || grep -q -E '^\s+# TYPE' "$file"; then
              echo "ERROR: $file has leading whitespace in metrics definitions"
              exit 1
            fi
          done
          
      - name: Verify CHANGELOG is updated
        run: |
          echo "Checking CHANGELOG.md..."
          
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            # For PRs, check if CHANGELOG.md was modified
            git fetch origin $GITHUB_BASE_REF --depth=1
            if ! git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA | grep -q "CHANGELOG.md"; then
              echo "WARNING: CHANGELOG.md was not updated in this PR"
              # Don't fail the build, just warn
            fi
          fi
      
      - name: Verify dashboard JSON files
        run: |
          echo "Checking dashboard JSON files..."
          
          # Count dashboard files
          DASHBOARD_COUNT=$(find ./monitoring/grafana/dashboards -name "*.json" | wc -l)
          if [ "$DASHBOARD_COUNT" -lt 1 ]; then
            echo "ERROR: No dashboard JSON files found"
            exit 1
          fi
          
          # Verify dashboard files are valid JSON
          for dashboard in $(find ./monitoring/grafana/dashboards -name "*.json"); do
            if ! jq empty "$dashboard" 2>/dev/null; then
              echo "ERROR: Invalid JSON in $dashboard"
              exit 1
            fi
          done

  # Integration test job - only run if validate and validate-metrics pass
  integration-test:
    runs-on: ubuntu-latest
    needs: [validate, validate-metrics]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Compose
        run: |
          docker-compose --version
      
      - name: Start services
        run: |
          docker-compose -f docker-compose-clean.yml up -d
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
      
      - name: Run integration tests
        run: |
          # Run integration test script
          ./scripts/test-service-health.sh
      
      - name: Check metrics endpoints
        run: |
          # Test metrics endpoints
          for port in $(seq 9091 9096); do
            echo "Testing metrics on port $port..."
            curl -s http://localhost:$port/metrics || echo "No service on port $port"
          done
      
      - name: Teardown services
        run: |
          docker-compose -f docker-compose-clean.yml down