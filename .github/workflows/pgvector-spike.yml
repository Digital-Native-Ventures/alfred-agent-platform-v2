name: pgvector-spike
on:
  pull_request:
    paths:
      - "scripts/migrate_qdrant_to_pgvector.py"
      - "services/vector-pg/**"
jobs:
  spike:
    runs-on: ubuntu-latest
    services:
      pg:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: memory
          POSTGRES_USER: memory
          POSTGRES_PASSWORD: memorypass
        options: >-
          --health-cmd "pg_isready -U memory"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      qdrant:
        image: qdrant/qdrant:v1.9.0
        options: >-
          --health-cmd "wget -qO- http://localhost:6333/readyz || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: "3.12"}
      - run: pip install psycopg2-binary requests
      - name: Run migration dry-run
        env:
          QDRANT_URL: http://localhost:6333
          PG_DSN: postgresql://memory:memorypass@localhost:5432/memory
        run: |
          scripts/migrate_qdrant_to_pgvector.py --dry
      - name: Sanity query
        env:
          PG_DSN: postgresql://memory:memorypass@localhost:5432/memory
        run: |
          python - <<'PY'
import os, psycopg2
conn = psycopg2.connect(os.environ["PG_DSN"])
cur = conn.cursor()
cur.execute("CREATE EXTENSION IF NOT EXISTS pgvector;")
cur.execute("CREATE TABLE IF NOT EXISTS embeddings (id TEXT PRIMARY KEY, path TEXT, sha TEXT, vec vector(768));")
cur.execute("SELECT count(*) FROM embeddings")
print("Rows in embeddings:", cur.fetchone()[0])
cur.close(); conn.close()
PY