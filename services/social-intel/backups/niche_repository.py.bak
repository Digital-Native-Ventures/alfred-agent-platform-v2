"""
Niche Repository - Provides database access for niche data.
"""

import structlog
from typing import List, Dict, Any, Optional
from . import execute_query, execute_query_single, execute_command

logger = structlog.get_logger(__name__)

async def get_hot_niches(limit: int = 50) -> List[Dict[str, Any]]:
    """
    Get today's hot niches from the materialized view.
    
    Args:
        limit: Maximum number of niches to return (default: 50)
        
    Returns:
        List of hot niches with opportunity scores
    """
    query = """
    SELECT niche_id, phrase, demand_score, monetise_score, 
           supply_score, opportunity, updated_at
    FROM hot_niches_today
    ORDER BY opportunity DESC
    LIMIT $1
    """
    
    try:
        niches = await execute_query(query, limit)
        logger.info("Retrieved hot niches", count=len(niches))
        return niches
    except Exception as e:
        logger.error("Failed to get hot niches", error=str(e))
        # Return empty list on error to allow graceful degradation
        return []

async def insert_feature(phrase: str, demand_score: float, 
                        monetise_score: float, supply_score: float) -> Optional[Dict[str, Any]]:
    """
    Insert a new niche feature into the database.
    
    Args:
        phrase: The niche phrase/keyword
        demand_score: Demand score (0.0 to 1.0)
        monetise_score: Monetization score (0.0 to 1.0)
        supply_score: Supply/competition score (0.0 to 1.0)
        
    Returns:
        The inserted feature row or None on failure
    """
    query = """
    INSERT INTO features (phrase, demand_score, monetise_score, supply_score, opportunity)
    VALUES ($1, $2, $3, $4, ($2 * $3) / GREATEST($4, 0.01))
    RETURNING niche_id, phrase, demand_score, monetise_score, supply_score, opportunity, updated_at
    """
    
    try:
        result = await execute_query_single(query, phrase, demand_score, monetise_score, supply_score)
        logger.info("Inserted new feature", phrase=phrase)
        return result
    except Exception as e:
        logger.error("Failed to insert feature", phrase=phrase, error=str(e))
        return None

async def get_feature_by_phrase(phrase: str) -> Optional[Dict[str, Any]]:
    """
    Get a feature by its phrase/keyword.
    
    Args:
        phrase: The niche phrase to look up
        
    Returns:
        The feature row or None if not found
    """
    query = """
    SELECT niche_id, phrase, demand_score, monetise_score, 
           supply_score, opportunity, updated_at
    FROM features
    WHERE phrase = $1
    """
    
    try:
        return await execute_query_single(query, phrase)
    except Exception as e:
        logger.error("Failed to get feature by phrase", phrase=phrase, error=str(e))
        return None

async def update_feature_scores(niche_id: int, demand_score: float, 
                              monetise_score: float, supply_score: float) -> bool:
    """
    Update scores for an existing feature.
    
    Args:
        niche_id: The ID of the feature to update
        demand_score: New demand score
        monetise_score: New monetization score
        supply_score: New supply/competition score
        
    Returns:
        True if update was successful, False otherwise
    """
    query = """
    UPDATE features
    SET demand_score = $2,
        monetise_score = $3,
        supply_score = $4,
        opportunity = ($2 * $3) / GREATEST($4, 0.01),
        updated_at = now()
    WHERE niche_id = $1
    """
    
    try:
        rowcount = await execute_command(query, niche_id, demand_score, monetise_score, supply_score)
        return rowcount > 0
    except Exception as e:
        logger.error("Failed to update feature scores", niche_id=niche_id, error=str(e))
        return False