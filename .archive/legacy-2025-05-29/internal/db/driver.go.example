package db

import (
	"context"
	"fmt"
	"net/url"
	"strings"
	"time"
)

// Status represents the health status of a database
type Status string

const (
	// StatusUp indicates the database is fully operational
	StatusUp Status = "up"

	// StatusDown indicates the database is not available
	StatusDown Status = "down"

	// StatusDegraded indicates the database is available but experiencing issues
	StatusDegraded Status = "degraded"
)

// Driver defines the common interface for database health checks
type Driver interface {
	// Connect establishes a connection to the database
	Connect(ctx context.Context) error

	// Ping verifies the database connection is still alive
	Ping(ctx context.Context) error

	// CheckReadWrite performs a read/write test on the health check table
	CheckReadWrite(ctx context.Context) error

	// Close closes the database connection
	Close() error

	// Status returns the current database status
	Status() Status

	// Metrics returns the database metrics
	Metrics() map[string]float64
}

// Config contains configuration options for database drivers
type Config struct {
	// DSN is the data source name for the database connection
	DSN string

	// CreateTable indicates whether to create the health check table
	CreateTable bool

	// Connection pool configuration
	MaxOpenConns    int
	MaxIdleConns    int
	ConnMaxLifetime time.Duration
	ConnMaxIdleTime time.Duration

	// Operation timeouts
	ConnectionTimeout    time.Duration
	PingTimeout          time.Duration
	ReadTimeout          time.Duration
	WriteTimeout         time.Duration
	TableCreationTimeout time.Duration

	// Retry configuration
	MaxRetries     int
	RetryDelay     time.Duration
	RetryDelayStep time.Duration
}

// DefaultConfig returns a default configuration for database drivers
func DefaultConfig() Config {
	return Config{
		CreateTable:          true,
		MaxOpenConns:         10,
		MaxIdleConns:         5,
		ConnMaxLifetime:      15 * time.Minute,
		ConnMaxIdleTime:      5 * time.Minute,
		ConnectionTimeout:    10 * time.Second,
		PingTimeout:          5 * time.Second,
		ReadTimeout:          5 * time.Second,
		WriteTimeout:         5 * time.Second,
		TableCreationTimeout: 10 * time.Second,
		MaxRetries:           3,
		RetryDelay:           1 * time.Second,
		RetryDelayStep:       2 * time.Second,
	}
}

// NewDriver creates a new database driver based on the DSN scheme
func NewDriver(cfg Config) (Driver, error) {
	if cfg.DSN == "" {
		return nil, fmt.Errorf("DSN cannot be empty")
	}

	// Parse DSN to determine the driver type
	scheme, err := extractSchemeFromDSN(cfg.DSN)
	if err != nil {
		return nil, fmt.Errorf("failed to extract scheme from DSN: %w", err)
	}

	switch scheme {
	case "postgres", "postgresql":
		return NewPostgresDriver(cfg), nil
	case "mysql":
		// TODO: Implement MySQL driver
		return nil, fmt.Errorf("mysql driver not implemented yet")
	case "sqlite", "file":
		// TODO: Implement SQLite driver
		return nil, fmt.Errorf("sqlite driver not implemented yet")
	case "sqlserver", "mssql":
		// TODO: Implement MSSQL driver
		return nil, fmt.Errorf("mssql driver not implemented yet")
	default:
		return nil, fmt.Errorf("unsupported database scheme: %s", scheme)
	}
}

// extractSchemeFromDSN extracts the scheme from a DSN string
func extractSchemeFromDSN(dsn string) (string, error) {
	// Handle standard URL format
	if strings.Contains(dsn, "://") {
		parsedURL, err := url.Parse(dsn)
		if err != nil {
			return "", fmt.Errorf("failed to parse DSN as URL: %w", err)
		}
		return parsedURL.Scheme, nil
	}

	// Handle other DSN formats
	lowerDSN := strings.ToLower(dsn)

	if strings.HasPrefix(lowerDSN, "postgres") || strings.HasPrefix(lowerDSN, "postgresql") {
		return "postgres", nil
	}

	if strings.HasPrefix(lowerDSN, "mysql") {
		return "mysql", nil
	}

	if strings.HasPrefix(lowerDSN, "file:") || strings.HasSuffix(lowerDSN, ".db") ||
		strings.HasSuffix(lowerDSN, ".sqlite") || strings.HasSuffix(lowerDSN, ".sqlite3") {
		return "sqlite", nil
	}

	if strings.HasPrefix(lowerDSN, "server=") || strings.HasPrefix(lowerDSN, "data source=") {
		return "sqlserver", nil
	}

	return "", fmt.Errorf("unable to determine database type from DSN")
}
