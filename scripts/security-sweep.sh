#!/usr/bin/env bash
set -euo pipefail

# Security sweep script for Alfred platform
# Scans all images for vulnerabilities and generates security report

echo "=== Alfred Platform Security Sweep ==="

# Create output directory
REPORT_DIR="security-reports"
mkdir -p "$REPORT_DIR"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
REPORT_FILE="$REPORT_DIR/security-report-$TIMESTAMP.md"

# Initialize report
cat > "$REPORT_FILE" << EOF
# Alfred Platform Security Report

**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
**Scanner**: Trivy $(trivy version 2>/dev/null | head -1 || echo "unknown")

## Executive Summary

This report contains vulnerability assessments for all images used in the Alfred platform.

---

EOF

# Function to scan image and append to report
scan_image() {
    local image="$1"
    local description="$2"
    
    echo "Scanning $image..."
    
    # Get vulnerability counts
    local json_output
    json_output=$(trivy image --format json --severity HIGH,CRITICAL "$image" 2>/dev/null || echo '{"Results":[]}')
    
    local total_critical total_high
    total_critical=$(echo "$json_output" | jq -r '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
    total_high=$(echo "$json_output" | jq -r '[.Results[]? | select(.Vulnerabilities) | .Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
    
    # Add to report
    cat >> "$REPORT_FILE" << EOF
## $description

**Image**: \`$image\`

### Vulnerability Summary
- **Critical**: $total_critical
- **High**: $total_high
- **Status**: $([[ $total_critical -eq 0 && $total_high -eq 0 ]] && echo "✅ Clean" || echo "⚠️ Requires attention")

EOF

    # Add detailed vulnerabilities if any found
    if [[ $total_critical -gt 0 || $total_high -gt 0 ]]; then
        echo "### Critical & High Vulnerabilities" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        trivy image --format table --severity HIGH,CRITICAL "$image" 2>/dev/null | grep -E "(CVE|┌|├|└|│)" | head -20 >> "$REPORT_FILE" || true
        echo "\`\`\`" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    echo "---" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
}

# Base images
echo "Scanning base images..."
scan_image "python:3.11-slim" "Python 3.11 Base Image"
scan_image "postgres:15-alpine-hardened" "PostgreSQL 15 Hardened"
scan_image "redis:7-alpine" "Redis 7 Alpine"
scan_image "ollama/ollama:latest" "Ollama LLM Service"

# Alfred custom images (if they exist locally)
echo "Scanning custom images..."
if docker image inspect agent-core:latest >/dev/null 2>&1; then
    scan_image "agent-core:latest" "Alfred Agent Core"
fi

if docker image inspect pubsub-metrics:latest >/dev/null 2>&1; then
    scan_image "pubsub-metrics:latest" "PubSub Metrics"
fi

if docker image inspect model-registry:latest >/dev/null 2>&1; then
    scan_image "model-registry:latest" "Model Registry"
fi

if docker image inspect model-router:latest >/dev/null 2>&1; then
    scan_image "model-router:latest" "Model Router"
fi

# Scan other common images in docker-compose
echo "Scanning additional service images..."
scan_image "postgrest/postgrest:v11.2.0" "PostgREST API"
scan_image "gcr.io/google.com/cloudsdktool/cloud-sdk:latest" "Google Cloud SDK (PubSub Emulator)"
scan_image "oliver006/redis_exporter:v1.62.0-alpine" "Redis Exporter"
scan_image "mailhog/mailhog:latest" "MailHog Mail Server"
scan_image "grafana/grafana:10.2.3" "Grafana Dashboard"
scan_image "prom/prometheus:v2.48.1" "Prometheus Metrics"

# Add recommendations to report
cat >> "$REPORT_FILE" << EOF

## Security Recommendations

### High Priority Actions
1. **Update base images** to latest patch versions addressing known CVEs
2. **Replace vulnerable binaries** like gosu with more secure alternatives (su-exec)
3. **Upgrade Python packages** especially setuptools to version >=75.0.0
4. **Update Alpine packages** in all Alpine-based images

### Base Image Recommendations
- **Python services**: Use \`alfred-python-secure:latest\` base image
- **PostgreSQL**: Use \`alfred-postgres-secure:latest\` base image  
- **Multi-stage builds**: Separate build and runtime stages to reduce attack surface

### Security Hardening Measures
- ✅ Run containers as non-root users
- ✅ Use minimal base images (alpine/slim variants)
- ✅ Remove unnecessary packages and files
- ✅ Set proper file permissions
- ✅ Use security contexts in Kubernetes deployments

### Monitoring & Maintenance
- 📅 **Schedule**: Run security scans weekly
- 🔄 **Updates**: Monitor for new CVEs and patch regularly
- 📊 **Metrics**: Track vulnerability reduction over time
- 🚨 **Alerts**: Set up notifications for critical vulnerabilities

---

**Report generated by**: \`scripts/security-sweep.sh\`  
**Next scan recommended**: $(date -d "+7 days" +"%Y-%m-%d")

EOF

echo "Security sweep completed!"
echo "Report saved to: $REPORT_FILE"

# Print summary
echo ""
echo "=== Security Summary ==="
total_files=$(grep -c "^## " "$REPORT_FILE" | tail -1 || echo "0")
clean_images=$(grep -c "✅ Clean" "$REPORT_FILE" || echo "0")
vulnerable_images=$(grep -c "⚠️ Requires attention" "$REPORT_FILE" || echo "0")

echo "Images scanned: $((total_files - 1))"  # Subtract 1 for "Security Recommendations" section
echo "Clean images: $clean_images"
echo "Vulnerable images: $vulnerable_images"

if [[ $vulnerable_images -gt 0 ]]; then
    echo ""
    echo "⚠️  Action required: $vulnerable_images images have HIGH or CRITICAL vulnerabilities"
    echo "📄 Review full report: $REPORT_FILE"
    exit 1
else
    echo ""
    echo "✅ All scanned images are clean of HIGH and CRITICAL vulnerabilities"
fi